@page "/register"
@using Front.Models
@inject Front.Services.CustomAuthStateProvider authStateProvider
@inject NavigationManager navManager
@inject Clients.CustomGateway.IAuthGatewayClient authClient


@if (User == null)
{
    <PageTitle>Registration</PageTitle>

    <h1>Registration</h1>

    <Front.Components.Modals.MessageBox @ref="messageBox"/>
    
    
    <div>
        Email
        @if (!string.IsNullOrEmpty(EmailMessage))
        {
            <div class="text-danger">
                @EmailMessage
            </div>
        }
        <input class="input-group-text" @bind="Email"/>
    </div>

    
    <div>
        Name
        @if (!string.IsNullOrEmpty(NameMessage))
        {
            <div class="text-danger">
                @NameMessage
            </div>
        }
        <input class="input-group-text" @bind="Name" />
    </div>
    
    <div>
        Address
        @if (!string.IsNullOrEmpty(AddressMessage))
        {
            <div class="text-danger">
                @AddressMessage
            </div>
        }
        <input class="input-group-text" @bind="Address" />
    </div>
    <button class="btn btn-primary" @onclick="OnSubmitClicked">Submit</button>
}
else
{
    <div>
        Redirecting to user page
    </div>

    navManager.NavigateTo($"user/{User.Id}");
}



@code {
    private string Email = string.Empty;
    private string Name = string.Empty;
    private string Address = string.Empty;

    private string? EmailMessage;
    private string? NameMessage;
    private string? AddressMessage;

    private User? User { get; set; }

    Front.Components.Modals.MessageBox messageBox = null!;

    protected override void OnInitialized()
    {
        authStateProvider.AuthenticationStateChanged += AuthStateChanged;
        User = authStateProvider.CurrentUser;
        base.OnInitialized();
    }

    private void AuthStateChanged(Task<AuthenticationState> authenticationState)
    {
        User = authStateProvider.CurrentUser;
        StateHasChanged();
    }


    private async Task OnSubmitClicked(MouseEventArgs e)
    {
        EmailMessage = null;
        NameMessage = null;
        AddressMessage = null;

        try
        {
            var dto = new Clients.CustomGateway.CreateUserDto() { Address = this.Address, Email = this.Email, Name = this.Name };
            
            if (!IsValid(dto)) return;

            var result = await authClient.RegisterAsync(dto);
            messageBox.ClearOnCloseEvent();
            messageBox.OnClose += (c) => { messageBox.ClearOnCloseEvent(); navManager.NavigateTo(""); return Task.CompletedTask; };
            messageBox.ModalShow("Success", result);
        }
        catch (Clients.CustomGateway.GatewayException ex)
        {
            messageBox.ModalShow("Error", ex.Message);
        }
    }

    bool IsValid(Clients.CustomGateway.CreateUserDto userDto)
    {
        var result = true;

        userDto.Email = userDto.Email.Trim();
        userDto.Name = userDto.Name.Trim();
        userDto.Address = userDto.Address.Trim();

        if (!System.Net.Mail.MailAddress.TryCreate(userDto.Email, out System.Net.Mail.MailAddress? a))
        {
            EmailMessage = "That is not a valid email";
            result = false;
        }

        if (string.IsNullOrEmpty(userDto.Name))
        {
            NameMessage = "Can not be empty";
            result = false;
        }

        if (string.IsNullOrEmpty(userDto.Address))
        {
            AddressMessage = "Can not be empty";
            result = false;
        }

        return result;        
    }
}

@using Front.Models
@using Front.Services
@inject CustomAuthStateProvider uService
@inject NavigationManager navManager
@page "/user/{UserId:guid}"

<PageTitle>User</PageTitle>

<Front.Components.AuthService.UserInfo Id="@(LoadingClientsPage ? (User?.Id ?? throw new ArgumentException()) : UserId)" />

@if (LoadingClientsPage)
{
    <button class="btn btn-primary" @onclick="OnLogOutClickedAsync">Log out</button>
}

@code {
    protected override Task OnInitializedAsync()
    {
        uService.AuthenticationStateChanged += AuthStateChanged;
        User = uService.CurrentUser;
        return base.OnInitializedAsync();
    }

    [Parameter]
    public Guid UserId { get; set; }

    private User? User { get; set; }

    public bool LoadingClientsPage => (User != null && User.Id == UserId || UserId == default);

    private Task OnLogOutClickedAsync(MouseEventArgs e)
    {
        uService.Logout();
        navManager.NavigateTo("");
        return Task.CompletedTask;
    }

    private void AuthStateChanged(Task<AuthenticationState> authenticationState)
    {
        User = uService.CurrentUser;
        StateHasChanged();
    }
}
